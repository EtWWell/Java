来源
https://zhuanlan.zhihu.com/p/61360604
一定要使用Tomcat 9.0？？
这个例子和servletLogin2不同的地方在于它没有.html静态页面，浏览器发出请求login，服务器调用LoginServlet来处理，servlet直接生成一个html页面返回。浏览器在生成的html页面表单中调好数据后单击提交，表单提交，浏览器再次发出一个Http请求，方法是get，使用get方法发出请求时，你可以在url中输入：http://localhost:8080/servletLogin/user?uname=wq&pwd=123
这和访问http://localhost:8080/servletLogin/login 然后填写表单的效果是一样的（你甚至可以在url中看到你在表单中填写的信息跳了出来，可见如果是关于密码的填写最好不要使用get），前提时你的表单提交方法时get，servlet使用doGet（）处理get请求，使用doPost（）处理post请求。
这个例子中使用了session跟踪，session在服务器端记录了请求信息（cookie是在浏览器中跟踪信息）。session是基于map的技术，使用键值对保存信息。通常session都有作用域，一般浏览器默认的session过期时间为30min。创建session的方法是HttpSession session = response.getSession();一个Http请求可以创建多个HttpSession对象，也就是还可以创建HttpSession session1 = response.getSession();HttpSession session2 = response.getSession();但是这些对象的值都是一样的，是同一个实体的不同引用，他们都指向response.getSession()，一个session上可以绑定多个键值对。
但是，session储存在服务器端，服务端和客户端如何保持session的值呢，这样一个场景，客户端向服务器端发送一个HTTP请求，服务器给客户端新建一个独一无二的session为123并响应客户端时告诉客户端，我给你了一个sessionid叫123 ，下次你再发出请求的时后加上这个我就认识你了。那客户端要怎么把session的值加入到Http请求中去呢？方法一时把这个sessionid保存到浏览器的cookie中，下次客户端发送请求时连cookie一起发送，服务器就能在cookie中找到sessionid，但如果客户端不支持cookie，则无效。方法二是隐藏的表单字段，比如<input type="hidden" name="sessionid" value="12345">，当客户端浏览器提交表单时，指定的键和值会和其他信息一起自动包含在post和get数据中，这里的hidden指的是在表单中看不到这个字段，而我们已经提前设置了这个sessionid字段的值为123456，表单提交的时候就会把这个字段数据和其他字段数据一起提交。注意，当表单使用Get方法提交数据的时候，我们仍然可以在url中看到我们设置的字段sessionid和值12345，这和第三种方法重写url应该时一样的。但是，当我们点击超链接跳转时，并不会触发表单的提交，session也就无效。第三种方法时url重写，在url末尾追加一些额外的数据来表示session会话，服务器会把该session会话表示符和已存储的session会话的数据相关联。例如，http://w3cschool.cn/file.htm;sessionid=12345，session 会话标识符被附加为 sessionid=12345，标识符可被 Web 服务器访问以识别客户端。HttpServletResponse接口中定义了两个用于完成URL重写方法：encodeURL方法和encodeRedirectURL方法。这样看来第三和第二种方法还是不一样的。
